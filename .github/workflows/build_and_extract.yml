name: Build backend image, optionally download TF Hub model, extract model, and push image to GHCR

on:
  workflow_dispatch:
    inputs:
      tfhub_url:
        description: 'Optional TF Hub URL to download and convert to SavedModel before build'
        required: false
        default: ''
      push_to_registry:
        description: 'Whether to push the built image to GitHub Container Registry (true/false)'
        required: false
        default: 'false'
jobs:
  build-and-extract:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pip requirements for model conversion
        run: |
          python -m pip install --upgrade pip
          pip install tensorflow tensorflow_hub

      - name: Optionally download TF Hub model
        if: ${{ github.event.inputs.tfhub_url != '' }}
        run: |
          python download_tfhub_model.py --hub_url "${{ github.event.inputs.tfhub_url }}" --output_dir ./models/hub_model/1 || echo "TF Hub download failed"

      - name: Build backend image
        run: |
          docker build --pull -t agro-backend:demo -f backend/Dockerfile .

      - name: Create container
        run: |
          docker create --name tmp_agro agro-backend:demo || true

      - name: Copy models out of container
        run: |
          mkdir -p extracted_models
          docker cp tmp_agro:/app/models ./extracted_models || echo "No models found in image"

      - name: Upload models artifact
        uses: actions/upload-artifact@v4
        with:
          name: extracted-models
          path: extracted_models

      - name: Push image to GitHub Container Registry
        if: ${{ github.event.inputs.push_to_registry == 'true' }}
        env:
          CR_PAT: ${{ secrets.GHCR_PAT }}
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
        run: |
          echo $CR_PAT | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
          docker tag agro-backend:demo $IMAGE_NAME
          docker push $IMAGE_NAME || echo "Push failed; check GHCR_PAT secret and permissions"

      - name: Remove temp container
        run: |
          docker rm -f tmp_agro || true
